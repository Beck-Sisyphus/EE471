module InstrucDecoder (
	input  [31:26] instr, 
	output RegDst, ALUSrc, Mem2Reg, RegWrite, MemRead, Memwrite, Branch, ALUop1, ALUop0
);
	parameter R = 6'b000000, lw = 6'b100011, sw = 6'b101011, beq = 6'b000100
	always @(*) begin
		case (instr)
			R:        begin
				RegDst   = 1'b1;
				ALUSrc   = 1'b0;
				Mem2Reg  = 1'b0;
				RegWrite = 1'b1;
				MemRead  = 1'b0;
				Memwrite = 1'b0;
				Branch   = 1'b0;
				ALUop1   = 1'b1;
				ALUop0   = 1'b0;
			end
			lw:       begin
				RegDst   = 1'b0;
				ALUSrc   = 1'b1;
				Mem2Reg  = 1'b1;
				RegWrite = 1'b1;
				MemRead  = 1'b1;
				Memwrite = 1'b0;
				Branch   = 1'b0;
				ALUop1   = 1'b0;
				ALUop0   = 1'b0;
			end
			sw:       begin
				RegDst   = 1'bx;
				ALUSrc   = 1'b1;
				Mem2Reg  = 1'bx;
				RegWrite = 1'b0;
				MemRead  = 1'b0;
				Memwrite = 1'b1;
				Branch   = 1'b0;
				ALUop1   = 1'b0;
				ALUop0   = 1'b0;
			end
			beq:      begin
				RegDst   = 1'bx;
				ALUSrc   = 1'b0;
				Mem2Reg  = 1'bx;
				RegWrite = 1'b0;
				MemRead  = 1'b0;
				Memwrite = 1'b0;
				Branch   = 1'b1;
				ALUop1   = 1'b0;
				ALUop0   = 1'b1;
			end
			default : begin   
				RegDst   = 1'bx;
				ALUSrc   = 1'bx;
				Mem2Reg  = 1'bx;
				RegWrite = 1'bx;
				MemRead  = 1'bx;
				Memwrite = 1'bx;
				Branch   = 1'bx;
				ALUop1   = 1'bx;
				ALUop0   = 1'bx;
			end
		endcase
	end
endmodule
